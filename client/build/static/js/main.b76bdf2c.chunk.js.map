{"version":3,"sources":["Header.js","Today.js","App.js","serviceWorker.js","index.js"],"names":["dayOfTheWeek","moment","format","Header","react_default","a","createElement","Component","Today","className","onSubmit","this","addItemToday","placeholder","type","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newToDo","todayList","thisWeekList","thisMonthList","sometimeList","bind","assertThisInitialized","e","event","console","log","target","value","setState","preventDefault","Header_Header","Today_Today","parent_state","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAMMA,QAAeC,KAASC,OAAO,QAKhBC,mLAEjB,OAEIC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kBAAUN,GACVI,EAAAC,EAAAC,cAAA,+CAN0BC,aCTfC,mLAEjB,OAEIJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,QAAMI,SAAUC,KAAKC,cACnBR,EAAAC,EAAAC,cAAA,SAAOO,YAAY,eAEnBT,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,UAAb,gBATuBP,aCKdQ,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAI,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAX,KAAMK,KAEDO,MAAQ,CACXC,QAAS,GACTC,UAAW,CAAC,WAAY,UACxBC,aAAc,CAAC,mBAAoB,WACnCC,cAAe,CAAC,yBAA0B,cAC1CC,aAAc,CAAC,YAAa,iBAIhCX,EAAKL,aAAeK,EAAKL,aAAaiB,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAZDA,4EAkBRc,0CAwBGC,GACZC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBzB,KAAK0B,SAAS,CAACb,QAASQ,EAAMG,OAAOC,6CAG1BJ,GAEbA,EAAMM,iBAEN3B,KAAK0B,SAAS,CAACb,QAAS,sCAStB,OACEpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAOC,aAAc9B,KAAKY,gBAhEDhB,aCKbmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b76bdf2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\n\n\n\nconst dayOfTheWeek = moment().format('dddd');\n\n\n\n\nexport default class Header extends Component {\n  render() {\n    return (\n\n        <header>\n          <h1>It's {dayOfTheWeek}</h1>\n          <h2>What are you going to do?</h2>\n        </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Today extends Component {\n  render() {\n    return (\n\n        <div className=\"today\">\n          <h3>today</h3>\n          <form onSubmit={this.addItemToday}>\n            <input placeholder=\"enter task\">\n            </input>\n            <button type=\"submit\">add</button>\n          </form>\n        </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Today from './Today';\n// import ThisWeek from './ThisWeek';\n// import ThisMonth from './ThisMonth';\n// import Sometime from './Sometime';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newToDo: '',\n      todayList: [\"feed cat\", \"shower\"],\n      thisWeekList: [\"grocery shopping\", \"laundry\"],\n      thisMonthList: [\"make dental apointment\", \"paint wall\"],\n      sometimeList: [\"pay taxes\", \"clean fridge\"],\n    };\n\n    // This binding is necessary to make `this` work in the callback\n  this.addItemToday = this.addItemToday.bind(this);\n  // this.addItemThisWeek = this.addItemThisWeek.bind(this);\n  // this.addItemThisMonth = this.addItemThisMonth.bind(this);\n  // this.addItemSometime = this.addItemSometime.bind(this);\n}\n\naddItemToday(e) {\n  //   if (this._inputElement.value !== \"\") {\n  //   var newItem = {\n  //     text: this._inputElement.value,\n  //     key: Date.now()\n  //   };\n\n  //   this.setState((prevState) => {\n  //     return {\n  //       todayList: prevState.todayList.concat(newItem)\n  //     };\n  //   });\n\n  //   this._inputElement.value = \"\";\n  // }\n\n  // console.log(this.state.todayList);\n\n  // e.preventDefault();\n\n}\n\n\n\n  onInputChange(event) {\n    console.log(event.target.value);\n    this.setState({newToDo: event.target.value})\n  }\n\n  onFormSubmit(event) {\n  // event.preventDefault(); tells the browser, \"don't submit form\"\n  event.preventDefault();\n  // clears the search field after submit\n  this.setState({newToDo: ''});\n  }\n\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Today parent_state={this.state}/>\n      </div>\n    );\n  }\n}\n        // <ThisWeek parent_state={this.state}/>\n        // <ThisMonth parent_state={this.state}/>\n        // <Sometime parent_state={this.state}/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}